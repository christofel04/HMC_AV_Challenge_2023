// Generated by gencpp from file ad_challenge_msgs/CM_Object.msg
// DO NOT EDIT!


#ifndef AD_CHALLENGE_MSGS_MESSAGE_CM_OBJECT_H
#define AD_CHALLENGE_MSGS_MESSAGE_CM_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ad_challenge_msgs
{
template <class ContainerAllocator>
struct CM_Object_
{
  typedef CM_Object_<ContainerAllocator> Type;

  CM_Object_()
    : Object_name()
    , state(0)
    , distance(0.0)
    , point_x(0.0)
    , point_y(0.0)
    , point_z(0.0)
    , width(0.0)
    , heigth(0.0)
    , length(0.0)  {
    }
  CM_Object_(const ContainerAllocator& _alloc)
    : Object_name(_alloc)
    , state(0)
    , distance(0.0)
    , point_x(0.0)
    , point_y(0.0)
    , point_z(0.0)
    , width(0.0)
    , heigth(0.0)
    , length(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Object_name_type;
  _Object_name_type Object_name;

   typedef int64_t _state_type;
  _state_type state;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _point_x_type;
  _point_x_type point_x;

   typedef float _point_y_type;
  _point_y_type point_y;

   typedef float _point_z_type;
  _point_z_type point_z;

   typedef float _width_type;
  _width_type width;

   typedef float _heigth_type;
  _heigth_type heigth;

   typedef float _length_type;
  _length_type length;





  typedef boost::shared_ptr< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> const> ConstPtr;

}; // struct CM_Object_

typedef ::ad_challenge_msgs::CM_Object_<std::allocator<void> > CM_Object;

typedef boost::shared_ptr< ::ad_challenge_msgs::CM_Object > CM_ObjectPtr;
typedef boost::shared_ptr< ::ad_challenge_msgs::CM_Object const> CM_ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ad_challenge_msgs::CM_Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ad_challenge_msgs::CM_Object_<ContainerAllocator1> & lhs, const ::ad_challenge_msgs::CM_Object_<ContainerAllocator2> & rhs)
{
  return lhs.Object_name == rhs.Object_name &&
    lhs.state == rhs.state &&
    lhs.distance == rhs.distance &&
    lhs.point_x == rhs.point_x &&
    lhs.point_y == rhs.point_y &&
    lhs.point_z == rhs.point_z &&
    lhs.width == rhs.width &&
    lhs.heigth == rhs.heigth &&
    lhs.length == rhs.length;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ad_challenge_msgs::CM_Object_<ContainerAllocator1> & lhs, const ::ad_challenge_msgs::CM_Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ad_challenge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "776a0629d3fff71ce9c701a589add34f";
  }

  static const char* value(const ::ad_challenge_msgs::CM_Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x776a0629d3fff71cULL;
  static const uint64_t static_value2 = 0xe9c701a589add34fULL;
};

template<class ContainerAllocator>
struct DataType< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad_challenge_msgs/CM_Object";
  }

  static const char* value(const ::ad_challenge_msgs::CM_Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Object_name\n"
"\n"
"# 0 : no data, 1 : on data\n"
"int64 state\n"
"\n"
"# reference dist\n"
"float32 distance\n"
"\n"
"# reference point\n"
"float32 point_x\n"
"float32 point_y\n"
"float32 point_z\n"
"\n"
"# width, heigth, length\n"
"float32 width\n"
"float32 heigth\n"
"float32 length\n"
"\n"
;
  }

  static const char* value(const ::ad_challenge_msgs::CM_Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Object_name);
      stream.next(m.state);
      stream.next(m.distance);
      stream.next(m.point_x);
      stream.next(m.point_y);
      stream.next(m.point_z);
      stream.next(m.width);
      stream.next(m.heigth);
      stream.next(m.length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CM_Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ad_challenge_msgs::CM_Object_<ContainerAllocator>& v)
  {
    s << indent << "Object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Object_name);
    s << indent << "state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "point_x: ";
    Printer<float>::stream(s, indent + "  ", v.point_x);
    s << indent << "point_y: ";
    Printer<float>::stream(s, indent + "  ", v.point_y);
    s << indent << "point_z: ";
    Printer<float>::stream(s, indent + "  ", v.point_z);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "heigth: ";
    Printer<float>::stream(s, indent + "  ", v.heigth);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AD_CHALLENGE_MSGS_MESSAGE_CM_OBJECT_H
