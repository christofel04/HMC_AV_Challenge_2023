# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ad_challenge_msgs/UAQ_Out.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class UAQ_Out(genpy.Message):
  _md5sum = "10e861f2efe1d78792349327441cc038"
  _type = "ad_challenge_msgs/UAQ_Out"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#
# Message from CarMaker ROS Node to external ROS Node
#

# General
Header  header                                 # General ROS Header (optional)
time    time                                   # ROS time when message was sent (optional)
int64   cycleno                                # Cycle number since simulation start (optional)
float64 synthdelay                             # Synthetic delay to check synchronization (optional)

float64 Car_Roll
float64 Car_Pitch
float64 Car_Yaw
float64 Car_vx
float64 Car_vy
float64 Car_vz
float64 Car_RollVel
float64 Car_PitchVel
float64 Car_YawVel
float64 Car_ax
float64 Car_ay
float64 Car_az
float64 Car_RollAcc
float64 Car_PitchAcc
float64 Car_YawAcc
float64 Steer_WhlAng
float64 VC_Gas
float64 VC_Brake
float64 VC_SelectorCtrl
float64 Sensor_Inertial_0_Vel_B_x
float64 Sensor_Inertial_0_Vel_B_y
float64 Sensor_Inertial_0_Vel_B_z
float64 Sensor_Inertial_0_Omega_B_x
float64 Sensor_Inertial_0_Omega_B_y
float64 Sensor_Inertial_0_Omega_B_z
float64 Sensor_Inertial_0_Acc_B_x
float64 Sensor_Inertial_0_Acc_B_y
float64 Sensor_Inertial_0_Acc_B_z
float64 Sensor_Inertial_0_Aplha_B_x
float64 Sensor_Inertial_0_Aplha_B_y
float64 Sensor_Inertial_0_Aplha_B_z
float64 Sensor_Inertial_1_Vel_B_x
float64 Sensor_Inertial_1_Vel_B_y
float64 Sensor_Inertial_1_Vel_B_z
float64 Sensor_Inertial_1_Omega_B_x
float64 Sensor_Inertial_1_Omega_B_y
float64 Sensor_Inertial_1_Omega_B_z
float64 Sensor_Inertial_1_Acc_B_x
float64 Sensor_Inertial_1_Acc_B_y
float64 Sensor_Inertial_1_Acc_B_z
float64 Sensor_Inertial_1_Aplha_B_x
float64 Sensor_Inertial_1_Aplha_B_y
float64 Sensor_Inertial_1_Aplha_B_z

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','time','cycleno','synthdelay','Car_Roll','Car_Pitch','Car_Yaw','Car_vx','Car_vy','Car_vz','Car_RollVel','Car_PitchVel','Car_YawVel','Car_ax','Car_ay','Car_az','Car_RollAcc','Car_PitchAcc','Car_YawAcc','Steer_WhlAng','VC_Gas','VC_Brake','VC_SelectorCtrl','Sensor_Inertial_0_Vel_B_x','Sensor_Inertial_0_Vel_B_y','Sensor_Inertial_0_Vel_B_z','Sensor_Inertial_0_Omega_B_x','Sensor_Inertial_0_Omega_B_y','Sensor_Inertial_0_Omega_B_z','Sensor_Inertial_0_Acc_B_x','Sensor_Inertial_0_Acc_B_y','Sensor_Inertial_0_Acc_B_z','Sensor_Inertial_0_Aplha_B_x','Sensor_Inertial_0_Aplha_B_y','Sensor_Inertial_0_Aplha_B_z','Sensor_Inertial_1_Vel_B_x','Sensor_Inertial_1_Vel_B_y','Sensor_Inertial_1_Vel_B_z','Sensor_Inertial_1_Omega_B_x','Sensor_Inertial_1_Omega_B_y','Sensor_Inertial_1_Omega_B_z','Sensor_Inertial_1_Acc_B_x','Sensor_Inertial_1_Acc_B_y','Sensor_Inertial_1_Acc_B_z','Sensor_Inertial_1_Aplha_B_x','Sensor_Inertial_1_Aplha_B_y','Sensor_Inertial_1_Aplha_B_z']
  _slot_types = ['std_msgs/Header','time','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time,cycleno,synthdelay,Car_Roll,Car_Pitch,Car_Yaw,Car_vx,Car_vy,Car_vz,Car_RollVel,Car_PitchVel,Car_YawVel,Car_ax,Car_ay,Car_az,Car_RollAcc,Car_PitchAcc,Car_YawAcc,Steer_WhlAng,VC_Gas,VC_Brake,VC_SelectorCtrl,Sensor_Inertial_0_Vel_B_x,Sensor_Inertial_0_Vel_B_y,Sensor_Inertial_0_Vel_B_z,Sensor_Inertial_0_Omega_B_x,Sensor_Inertial_0_Omega_B_y,Sensor_Inertial_0_Omega_B_z,Sensor_Inertial_0_Acc_B_x,Sensor_Inertial_0_Acc_B_y,Sensor_Inertial_0_Acc_B_z,Sensor_Inertial_0_Aplha_B_x,Sensor_Inertial_0_Aplha_B_y,Sensor_Inertial_0_Aplha_B_z,Sensor_Inertial_1_Vel_B_x,Sensor_Inertial_1_Vel_B_y,Sensor_Inertial_1_Vel_B_z,Sensor_Inertial_1_Omega_B_x,Sensor_Inertial_1_Omega_B_y,Sensor_Inertial_1_Omega_B_z,Sensor_Inertial_1_Acc_B_x,Sensor_Inertial_1_Acc_B_y,Sensor_Inertial_1_Acc_B_z,Sensor_Inertial_1_Aplha_B_x,Sensor_Inertial_1_Aplha_B_y,Sensor_Inertial_1_Aplha_B_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UAQ_Out, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = genpy.Time()
      if self.cycleno is None:
        self.cycleno = 0
      if self.synthdelay is None:
        self.synthdelay = 0.
      if self.Car_Roll is None:
        self.Car_Roll = 0.
      if self.Car_Pitch is None:
        self.Car_Pitch = 0.
      if self.Car_Yaw is None:
        self.Car_Yaw = 0.
      if self.Car_vx is None:
        self.Car_vx = 0.
      if self.Car_vy is None:
        self.Car_vy = 0.
      if self.Car_vz is None:
        self.Car_vz = 0.
      if self.Car_RollVel is None:
        self.Car_RollVel = 0.
      if self.Car_PitchVel is None:
        self.Car_PitchVel = 0.
      if self.Car_YawVel is None:
        self.Car_YawVel = 0.
      if self.Car_ax is None:
        self.Car_ax = 0.
      if self.Car_ay is None:
        self.Car_ay = 0.
      if self.Car_az is None:
        self.Car_az = 0.
      if self.Car_RollAcc is None:
        self.Car_RollAcc = 0.
      if self.Car_PitchAcc is None:
        self.Car_PitchAcc = 0.
      if self.Car_YawAcc is None:
        self.Car_YawAcc = 0.
      if self.Steer_WhlAng is None:
        self.Steer_WhlAng = 0.
      if self.VC_Gas is None:
        self.VC_Gas = 0.
      if self.VC_Brake is None:
        self.VC_Brake = 0.
      if self.VC_SelectorCtrl is None:
        self.VC_SelectorCtrl = 0.
      if self.Sensor_Inertial_0_Vel_B_x is None:
        self.Sensor_Inertial_0_Vel_B_x = 0.
      if self.Sensor_Inertial_0_Vel_B_y is None:
        self.Sensor_Inertial_0_Vel_B_y = 0.
      if self.Sensor_Inertial_0_Vel_B_z is None:
        self.Sensor_Inertial_0_Vel_B_z = 0.
      if self.Sensor_Inertial_0_Omega_B_x is None:
        self.Sensor_Inertial_0_Omega_B_x = 0.
      if self.Sensor_Inertial_0_Omega_B_y is None:
        self.Sensor_Inertial_0_Omega_B_y = 0.
      if self.Sensor_Inertial_0_Omega_B_z is None:
        self.Sensor_Inertial_0_Omega_B_z = 0.
      if self.Sensor_Inertial_0_Acc_B_x is None:
        self.Sensor_Inertial_0_Acc_B_x = 0.
      if self.Sensor_Inertial_0_Acc_B_y is None:
        self.Sensor_Inertial_0_Acc_B_y = 0.
      if self.Sensor_Inertial_0_Acc_B_z is None:
        self.Sensor_Inertial_0_Acc_B_z = 0.
      if self.Sensor_Inertial_0_Aplha_B_x is None:
        self.Sensor_Inertial_0_Aplha_B_x = 0.
      if self.Sensor_Inertial_0_Aplha_B_y is None:
        self.Sensor_Inertial_0_Aplha_B_y = 0.
      if self.Sensor_Inertial_0_Aplha_B_z is None:
        self.Sensor_Inertial_0_Aplha_B_z = 0.
      if self.Sensor_Inertial_1_Vel_B_x is None:
        self.Sensor_Inertial_1_Vel_B_x = 0.
      if self.Sensor_Inertial_1_Vel_B_y is None:
        self.Sensor_Inertial_1_Vel_B_y = 0.
      if self.Sensor_Inertial_1_Vel_B_z is None:
        self.Sensor_Inertial_1_Vel_B_z = 0.
      if self.Sensor_Inertial_1_Omega_B_x is None:
        self.Sensor_Inertial_1_Omega_B_x = 0.
      if self.Sensor_Inertial_1_Omega_B_y is None:
        self.Sensor_Inertial_1_Omega_B_y = 0.
      if self.Sensor_Inertial_1_Omega_B_z is None:
        self.Sensor_Inertial_1_Omega_B_z = 0.
      if self.Sensor_Inertial_1_Acc_B_x is None:
        self.Sensor_Inertial_1_Acc_B_x = 0.
      if self.Sensor_Inertial_1_Acc_B_y is None:
        self.Sensor_Inertial_1_Acc_B_y = 0.
      if self.Sensor_Inertial_1_Acc_B_z is None:
        self.Sensor_Inertial_1_Acc_B_z = 0.
      if self.Sensor_Inertial_1_Aplha_B_x is None:
        self.Sensor_Inertial_1_Aplha_B_x = 0.
      if self.Sensor_Inertial_1_Aplha_B_y is None:
        self.Sensor_Inertial_1_Aplha_B_y = 0.
      if self.Sensor_Inertial_1_Aplha_B_z is None:
        self.Sensor_Inertial_1_Aplha_B_z = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.time = genpy.Time()
      self.cycleno = 0
      self.synthdelay = 0.
      self.Car_Roll = 0.
      self.Car_Pitch = 0.
      self.Car_Yaw = 0.
      self.Car_vx = 0.
      self.Car_vy = 0.
      self.Car_vz = 0.
      self.Car_RollVel = 0.
      self.Car_PitchVel = 0.
      self.Car_YawVel = 0.
      self.Car_ax = 0.
      self.Car_ay = 0.
      self.Car_az = 0.
      self.Car_RollAcc = 0.
      self.Car_PitchAcc = 0.
      self.Car_YawAcc = 0.
      self.Steer_WhlAng = 0.
      self.VC_Gas = 0.
      self.VC_Brake = 0.
      self.VC_SelectorCtrl = 0.
      self.Sensor_Inertial_0_Vel_B_x = 0.
      self.Sensor_Inertial_0_Vel_B_y = 0.
      self.Sensor_Inertial_0_Vel_B_z = 0.
      self.Sensor_Inertial_0_Omega_B_x = 0.
      self.Sensor_Inertial_0_Omega_B_y = 0.
      self.Sensor_Inertial_0_Omega_B_z = 0.
      self.Sensor_Inertial_0_Acc_B_x = 0.
      self.Sensor_Inertial_0_Acc_B_y = 0.
      self.Sensor_Inertial_0_Acc_B_z = 0.
      self.Sensor_Inertial_0_Aplha_B_x = 0.
      self.Sensor_Inertial_0_Aplha_B_y = 0.
      self.Sensor_Inertial_0_Aplha_B_z = 0.
      self.Sensor_Inertial_1_Vel_B_x = 0.
      self.Sensor_Inertial_1_Vel_B_y = 0.
      self.Sensor_Inertial_1_Vel_B_z = 0.
      self.Sensor_Inertial_1_Omega_B_x = 0.
      self.Sensor_Inertial_1_Omega_B_y = 0.
      self.Sensor_Inertial_1_Omega_B_z = 0.
      self.Sensor_Inertial_1_Acc_B_x = 0.
      self.Sensor_Inertial_1_Acc_B_y = 0.
      self.Sensor_Inertial_1_Acc_B_z = 0.
      self.Sensor_Inertial_1_Aplha_B_x = 0.
      self.Sensor_Inertial_1_Aplha_B_y = 0.
      self.Sensor_Inertial_1_Aplha_B_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Iq44d().pack(_x.time.secs, _x.time.nsecs, _x.cycleno, _x.synthdelay, _x.Car_Roll, _x.Car_Pitch, _x.Car_Yaw, _x.Car_vx, _x.Car_vy, _x.Car_vz, _x.Car_RollVel, _x.Car_PitchVel, _x.Car_YawVel, _x.Car_ax, _x.Car_ay, _x.Car_az, _x.Car_RollAcc, _x.Car_PitchAcc, _x.Car_YawAcc, _x.Steer_WhlAng, _x.VC_Gas, _x.VC_Brake, _x.VC_SelectorCtrl, _x.Sensor_Inertial_0_Vel_B_x, _x.Sensor_Inertial_0_Vel_B_y, _x.Sensor_Inertial_0_Vel_B_z, _x.Sensor_Inertial_0_Omega_B_x, _x.Sensor_Inertial_0_Omega_B_y, _x.Sensor_Inertial_0_Omega_B_z, _x.Sensor_Inertial_0_Acc_B_x, _x.Sensor_Inertial_0_Acc_B_y, _x.Sensor_Inertial_0_Acc_B_z, _x.Sensor_Inertial_0_Aplha_B_x, _x.Sensor_Inertial_0_Aplha_B_y, _x.Sensor_Inertial_0_Aplha_B_z, _x.Sensor_Inertial_1_Vel_B_x, _x.Sensor_Inertial_1_Vel_B_y, _x.Sensor_Inertial_1_Vel_B_z, _x.Sensor_Inertial_1_Omega_B_x, _x.Sensor_Inertial_1_Omega_B_y, _x.Sensor_Inertial_1_Omega_B_z, _x.Sensor_Inertial_1_Acc_B_x, _x.Sensor_Inertial_1_Acc_B_y, _x.Sensor_Inertial_1_Acc_B_z, _x.Sensor_Inertial_1_Aplha_B_x, _x.Sensor_Inertial_1_Aplha_B_y, _x.Sensor_Inertial_1_Aplha_B_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 368
      (_x.time.secs, _x.time.nsecs, _x.cycleno, _x.synthdelay, _x.Car_Roll, _x.Car_Pitch, _x.Car_Yaw, _x.Car_vx, _x.Car_vy, _x.Car_vz, _x.Car_RollVel, _x.Car_PitchVel, _x.Car_YawVel, _x.Car_ax, _x.Car_ay, _x.Car_az, _x.Car_RollAcc, _x.Car_PitchAcc, _x.Car_YawAcc, _x.Steer_WhlAng, _x.VC_Gas, _x.VC_Brake, _x.VC_SelectorCtrl, _x.Sensor_Inertial_0_Vel_B_x, _x.Sensor_Inertial_0_Vel_B_y, _x.Sensor_Inertial_0_Vel_B_z, _x.Sensor_Inertial_0_Omega_B_x, _x.Sensor_Inertial_0_Omega_B_y, _x.Sensor_Inertial_0_Omega_B_z, _x.Sensor_Inertial_0_Acc_B_x, _x.Sensor_Inertial_0_Acc_B_y, _x.Sensor_Inertial_0_Acc_B_z, _x.Sensor_Inertial_0_Aplha_B_x, _x.Sensor_Inertial_0_Aplha_B_y, _x.Sensor_Inertial_0_Aplha_B_z, _x.Sensor_Inertial_1_Vel_B_x, _x.Sensor_Inertial_1_Vel_B_y, _x.Sensor_Inertial_1_Vel_B_z, _x.Sensor_Inertial_1_Omega_B_x, _x.Sensor_Inertial_1_Omega_B_y, _x.Sensor_Inertial_1_Omega_B_z, _x.Sensor_Inertial_1_Acc_B_x, _x.Sensor_Inertial_1_Acc_B_y, _x.Sensor_Inertial_1_Acc_B_z, _x.Sensor_Inertial_1_Aplha_B_x, _x.Sensor_Inertial_1_Aplha_B_y, _x.Sensor_Inertial_1_Aplha_B_z,) = _get_struct_2Iq44d().unpack(str[start:end])
      self.time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Iq44d().pack(_x.time.secs, _x.time.nsecs, _x.cycleno, _x.synthdelay, _x.Car_Roll, _x.Car_Pitch, _x.Car_Yaw, _x.Car_vx, _x.Car_vy, _x.Car_vz, _x.Car_RollVel, _x.Car_PitchVel, _x.Car_YawVel, _x.Car_ax, _x.Car_ay, _x.Car_az, _x.Car_RollAcc, _x.Car_PitchAcc, _x.Car_YawAcc, _x.Steer_WhlAng, _x.VC_Gas, _x.VC_Brake, _x.VC_SelectorCtrl, _x.Sensor_Inertial_0_Vel_B_x, _x.Sensor_Inertial_0_Vel_B_y, _x.Sensor_Inertial_0_Vel_B_z, _x.Sensor_Inertial_0_Omega_B_x, _x.Sensor_Inertial_0_Omega_B_y, _x.Sensor_Inertial_0_Omega_B_z, _x.Sensor_Inertial_0_Acc_B_x, _x.Sensor_Inertial_0_Acc_B_y, _x.Sensor_Inertial_0_Acc_B_z, _x.Sensor_Inertial_0_Aplha_B_x, _x.Sensor_Inertial_0_Aplha_B_y, _x.Sensor_Inertial_0_Aplha_B_z, _x.Sensor_Inertial_1_Vel_B_x, _x.Sensor_Inertial_1_Vel_B_y, _x.Sensor_Inertial_1_Vel_B_z, _x.Sensor_Inertial_1_Omega_B_x, _x.Sensor_Inertial_1_Omega_B_y, _x.Sensor_Inertial_1_Omega_B_z, _x.Sensor_Inertial_1_Acc_B_x, _x.Sensor_Inertial_1_Acc_B_y, _x.Sensor_Inertial_1_Acc_B_z, _x.Sensor_Inertial_1_Aplha_B_x, _x.Sensor_Inertial_1_Aplha_B_y, _x.Sensor_Inertial_1_Aplha_B_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 368
      (_x.time.secs, _x.time.nsecs, _x.cycleno, _x.synthdelay, _x.Car_Roll, _x.Car_Pitch, _x.Car_Yaw, _x.Car_vx, _x.Car_vy, _x.Car_vz, _x.Car_RollVel, _x.Car_PitchVel, _x.Car_YawVel, _x.Car_ax, _x.Car_ay, _x.Car_az, _x.Car_RollAcc, _x.Car_PitchAcc, _x.Car_YawAcc, _x.Steer_WhlAng, _x.VC_Gas, _x.VC_Brake, _x.VC_SelectorCtrl, _x.Sensor_Inertial_0_Vel_B_x, _x.Sensor_Inertial_0_Vel_B_y, _x.Sensor_Inertial_0_Vel_B_z, _x.Sensor_Inertial_0_Omega_B_x, _x.Sensor_Inertial_0_Omega_B_y, _x.Sensor_Inertial_0_Omega_B_z, _x.Sensor_Inertial_0_Acc_B_x, _x.Sensor_Inertial_0_Acc_B_y, _x.Sensor_Inertial_0_Acc_B_z, _x.Sensor_Inertial_0_Aplha_B_x, _x.Sensor_Inertial_0_Aplha_B_y, _x.Sensor_Inertial_0_Aplha_B_z, _x.Sensor_Inertial_1_Vel_B_x, _x.Sensor_Inertial_1_Vel_B_y, _x.Sensor_Inertial_1_Vel_B_z, _x.Sensor_Inertial_1_Omega_B_x, _x.Sensor_Inertial_1_Omega_B_y, _x.Sensor_Inertial_1_Omega_B_z, _x.Sensor_Inertial_1_Acc_B_x, _x.Sensor_Inertial_1_Acc_B_y, _x.Sensor_Inertial_1_Acc_B_z, _x.Sensor_Inertial_1_Aplha_B_x, _x.Sensor_Inertial_1_Aplha_B_y, _x.Sensor_Inertial_1_Aplha_B_z,) = _get_struct_2Iq44d().unpack(str[start:end])
      self.time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Iq44d = None
def _get_struct_2Iq44d():
    global _struct_2Iq44d
    if _struct_2Iq44d is None:
        _struct_2Iq44d = struct.Struct("<2Iq44d")
    return _struct_2Iq44d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
