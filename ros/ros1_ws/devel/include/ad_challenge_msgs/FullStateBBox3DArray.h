// Generated by gencpp from file ad_challenge_msgs/FullStateBBox3DArray.msg
// DO NOT EDIT!


#ifndef AD_CHALLENGE_MSGS_MESSAGE_FULLSTATEBBOX3DARRAY_H
#define AD_CHALLENGE_MSGS_MESSAGE_FULLSTATEBBOX3DARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ad_challenge_msgs/FullStateBBox3D.h>

namespace ad_challenge_msgs
{
template <class ContainerAllocator>
struct FullStateBBox3DArray_
{
  typedef FullStateBBox3DArray_<ContainerAllocator> Type;

  FullStateBBox3DArray_()
    : header()
    , boxes()  {
    }
  FullStateBBox3DArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , boxes(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ad_challenge_msgs::FullStateBBox3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ad_challenge_msgs::FullStateBBox3D_<ContainerAllocator> >> _boxes_type;
  _boxes_type boxes;





  typedef boost::shared_ptr< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> const> ConstPtr;

}; // struct FullStateBBox3DArray_

typedef ::ad_challenge_msgs::FullStateBBox3DArray_<std::allocator<void> > FullStateBBox3DArray;

typedef boost::shared_ptr< ::ad_challenge_msgs::FullStateBBox3DArray > FullStateBBox3DArrayPtr;
typedef boost::shared_ptr< ::ad_challenge_msgs::FullStateBBox3DArray const> FullStateBBox3DArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator1> & lhs, const ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.boxes == rhs.boxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator1> & lhs, const ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ad_challenge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0665d68567423c3c0c8261ce765a96c8";
  }

  static const char* value(const ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0665d68567423c3cULL;
  static const uint64_t static_value2 = 0x0c8261ce765a96c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad_challenge_msgs/FullStateBBox3DArray";
  }

  static const char* value(const ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"ad_challenge_msgs/FullStateBBox3D[] boxes\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ad_challenge_msgs/FullStateBBox3D\n"
"int64 id\n"
"vision_msgs/BoundingBox3D box\n"
"\n"
"## velocity and acceleration for bounding-box location\n"
"geometry_msgs/Twist velocity\n"
"geometry_msgs/Accel acceleration\n"
"\n"
"## velocity and acceleration for bounding-box size\n"
"geometry_msgs/Vector3 size_dot\n"
"geometry_msgs/Vector3 size_ddot\n"
"================================================================================\n"
"MSG: vision_msgs/BoundingBox3D\n"
"# A 3D bounding box that can be positioned and rotated about its center (6 DOF)\n"
"# Dimensions of this box are in meters, and as such, it may be migrated to\n"
"#   another package, such as geometry_msgs, in the future.\n"
"\n"
"# The 3D position and orientation of the bounding box center\n"
"geometry_msgs/Pose center\n"
"\n"
"# The size of the bounding box, in meters, surrounding the object's center\n"
"#   pose.\n"
"geometry_msgs/Vector3 size\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FullStateBBox3DArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ad_challenge_msgs::FullStateBBox3DArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "boxes[]" << std::endl;
    for (size_t i = 0; i < v.boxes.size(); ++i)
    {
      s << indent << "  boxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ad_challenge_msgs::FullStateBBox3D_<ContainerAllocator> >::stream(s, indent + "    ", v.boxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AD_CHALLENGE_MSGS_MESSAGE_FULLSTATEBBOX3DARRAY_H
