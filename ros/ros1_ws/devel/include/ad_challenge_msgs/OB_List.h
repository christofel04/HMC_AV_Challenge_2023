// Generated by gencpp from file ad_challenge_msgs/OB_List.msg
// DO NOT EDIT!


#ifndef AD_CHALLENGE_MSGS_MESSAGE_OB_LIST_H
#define AD_CHALLENGE_MSGS_MESSAGE_OB_LIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ad_challenge_msgs/CM_Object.h>

namespace ad_challenge_msgs
{
template <class ContainerAllocator>
struct OB_List_
{
  typedef OB_List_<ContainerAllocator> Type;

  OB_List_()
    : time()
    , Object_list()  {
    }
  OB_List_(const ContainerAllocator& _alloc)
    : time()
    , Object_list(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef std::vector< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >> _Object_list_type;
  _Object_list_type Object_list;





  typedef boost::shared_ptr< ::ad_challenge_msgs::OB_List_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ad_challenge_msgs::OB_List_<ContainerAllocator> const> ConstPtr;

}; // struct OB_List_

typedef ::ad_challenge_msgs::OB_List_<std::allocator<void> > OB_List;

typedef boost::shared_ptr< ::ad_challenge_msgs::OB_List > OB_ListPtr;
typedef boost::shared_ptr< ::ad_challenge_msgs::OB_List const> OB_ListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ad_challenge_msgs::OB_List_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ad_challenge_msgs::OB_List_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ad_challenge_msgs::OB_List_<ContainerAllocator1> & lhs, const ::ad_challenge_msgs::OB_List_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.Object_list == rhs.Object_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ad_challenge_msgs::OB_List_<ContainerAllocator1> & lhs, const ::ad_challenge_msgs::OB_List_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ad_challenge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ad_challenge_msgs::OB_List_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ad_challenge_msgs::OB_List_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ad_challenge_msgs::OB_List_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ad_challenge_msgs::OB_List_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ad_challenge_msgs::OB_List_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ad_challenge_msgs::OB_List_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ad_challenge_msgs::OB_List_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16234d4525d50fecc276cdee56b97cf0";
  }

  static const char* value(const ::ad_challenge_msgs::OB_List_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16234d4525d50fecULL;
  static const uint64_t static_value2 = 0xc276cdee56b97cf0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ad_challenge_msgs::OB_List_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad_challenge_msgs/OB_List";
  }

  static const char* value(const ::ad_challenge_msgs::OB_List_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ad_challenge_msgs::OB_List_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time   #testing\n"
"\n"
"ad_challenge_msgs/CM_Object[] Object_list\n"
"================================================================================\n"
"MSG: ad_challenge_msgs/CM_Object\n"
"string Object_name\n"
"\n"
"# 0 : no data, 1 : on data\n"
"int64 state\n"
"\n"
"# reference dist\n"
"float32 distance\n"
"\n"
"# reference point\n"
"float32 point_x\n"
"float32 point_y\n"
"float32 point_z\n"
"\n"
"# width, heigth, length\n"
"float32 width\n"
"float32 heigth\n"
"float32 length\n"
"\n"
;
  }

  static const char* value(const ::ad_challenge_msgs::OB_List_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ad_challenge_msgs::OB_List_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.Object_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OB_List_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ad_challenge_msgs::OB_List_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ad_challenge_msgs::OB_List_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "Object_list[]" << std::endl;
    for (size_t i = 0; i < v.Object_list.size(); ++i)
    {
      s << indent << "  Object_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ad_challenge_msgs::CM_Object_<ContainerAllocator> >::stream(s, indent + "    ", v.Object_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AD_CHALLENGE_MSGS_MESSAGE_OB_LIST_H
